// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/morticius/golang-transfer/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	db "github.com/morticius/golang-transfer/db/sqlc"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCurrency mocks base method
func (m *MockStore) CreateCurrency(arg0 context.Context, arg1 string) (db.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrency", arg0, arg1)
	ret0, _ := ret[0].(db.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCurrency indicates an expected call of CreateCurrency
func (mr *MockStoreMockRecorder) CreateCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrency", reflect.TypeOf((*MockStore)(nil).CreateCurrency), arg0, arg1)
}

// CreateTransfer mocks base method
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 db.CreateTransferParams) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// GetBalance mocks base method
func (m *MockStore) GetBalance(arg0 context.Context, arg1 int64) ([]db.GetBalanceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].([]db.GetBalanceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockStoreMockRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStore)(nil).GetBalance), arg0, arg1)
}

// GetCurrencyByCode mocks base method
func (m *MockStore) GetCurrencyByCode(arg0 context.Context, arg1 string) (db.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByCode", arg0, arg1)
	ret0, _ := ret[0].(db.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByCode indicates an expected call of GetCurrencyByCode
func (mr *MockStoreMockRecorder) GetCurrencyByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByCode", reflect.TypeOf((*MockStore)(nil).GetCurrencyByCode), arg0, arg1)
}

// GetCurrencyByID mocks base method
func (m *MockStore) GetCurrencyByID(arg0 context.Context, arg1 int64) (db.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", arg0, arg1)
	ret0, _ := ret[0].(db.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID
func (mr *MockStoreMockRecorder) GetCurrencyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockStore)(nil).GetCurrencyByID), arg0, arg1)
}

// ListTransfers mocks base method
func (m *MockStore) ListTransfers(arg0 context.Context, arg1 db.ListTransfersParams) ([]db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", arg0, arg1)
	ret0, _ := ret[0].([]db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers
func (mr *MockStoreMockRecorder) ListTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockStore)(nil).ListTransfers), arg0, arg1)
}

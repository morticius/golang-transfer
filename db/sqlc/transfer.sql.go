// Code generated by sqlc. DO NOT EDIT.
// source: transfer.sql

package db

import (
	"context"
	"time"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    user_id,
    currency_id,
    amount,
    time_placed
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, currency_id, amount, time_placed, created_at
`

type CreateTransferParams struct {
	UserID     int64     `json:"user_id"`
	CurrencyID int64     `json:"currency_id"`
	Amount     int64     `json:"amount"`
	TimePlaced time.Time `json:"time_placed"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.UserID,
		arg.CurrencyID,
		arg.Amount,
		arg.TimePlaced,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrencyID,
		&i.Amount,
		&i.TimePlaced,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, user_id, currency_id, amount, time_placed, created_at FROM transfers
WHERE
    user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTransfersParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CurrencyID,
			&i.Amount,
			&i.TimePlaced,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
